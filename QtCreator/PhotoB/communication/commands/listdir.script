serialize_r = function(v,opts,r,seen,depth)
        local vt = type(v)
        if vt == 'nil' or  vt == 'boolean' or vt == 'number' then
                table.insert(r,tostring(v))
                return
        end
        if vt == 'string' then
                table.insert(r,string.format('%q',v))
                return
        end
        if vt == 'table' then
                if not depth then
                        depth = 1
                end
                if depth >= opts.maxdepth then
                        error('serialize: max depth')
                end
                if not seen then
                        seen={}
                elseif seen[v] then
                        if opts.err_cycle then
                                error('serialize: cycle')
                        else
                                table.insert(r,'"cycle:'..tostring(v)..'"')
                                return
                        end
                end
                seen[v] = true;
                table.insert(r,'{')
                for k,v1 in pairs(v) do
                        if opts.pretty then
                                table.insert(r,'\n'..string.rep(' ',depth))
                        end
                        if type(k) == 'string' and string.match(k,'^[_%a][%a%d_]*$') then
                                table.insert(r,k)
                        else
                                table.insert(r,'[')
                                serialize_r(k,opts,r,seen,depth+1)
                                table.insert(r,']')
                        end
                        table.insert(r,'=')
                        serialize_r(v1,opts,r,seen,depth+1)
                        table.insert(r,',')
                end
                if opts.pretty then
                        table.insert(r,'\n'..string.rep(' ',depth-1))
                end
                table.insert(r,'}')
                return
        end
        if opts.err_type then
                error('serialize: unsupported type ' .. vt, 2)
        else
                table.insert(r,'"'..tostring(v)..'"')
        end
end
serialize_defaults = {
        maxdepth=10,
        err_type=true,
        err_cycle=true,
        pretty=false,
}
function serialize(v,opts)
        if opts then
                for k,v in pairs(serialize_defaults) do
                        if not opts[k] then
                                opts[k]=v
                        end
                end
        else
                opts=serialize_defaults
        end
        local r={}
        serialize_r(v,opts,r)
        return table.concat(r)
end

        usb_msg_table_to_string=serialize

function extend_table(target,source,deep)
        if type(target) ~= 'table' then
                error('extend_table: target not table')
        end
        if source == nil then
                return target
        end
        if type(source) ~= 'table' then
                error('extend_table: source not table')
        end
        if source == target then
                error('extend_table: source == target')
        end
        if deep then
                return extend_table_r(target, source)
        else
                for k,v in pairs(source) do
                        target[k]=v
                end
                return target
        end
end

function msg_batcher(opts)
        local t = extend_table({
                batchsize=50,
                batchgc='step',
                timeout=100000,
        },opts)
        t.data={}
        t.n=0
        if t.dbgmem then
                t.init_free = get_meminfo().free_block_max_size
                t.init_count = collectgarbage('count')
        end
        t.write=function(self,val)
                self.n = self.n+1
                self.data[self.n]=val
                if self.n >= self.batchsize then
                        return self:flush()
                end
                return true
        end
        t.flush = function(self)
                if self.n > 0 then
                        if self.dbgmem then
                                local count=collectgarbage('count')
                                local free=get_meminfo().free_block_max_size
                                self.data._dbg=string.format("count %d (%d) free %d (%d)",
                                        count, count - self.init_count, free, self.init_free-free)
                        end
                        if not write_usb_msg(self.data,self.timeout) then
                                return false
                        end
                        self.data={}
                        self.n=0
                        if self.batchgc then
                                collectgarbage(self.batchgc)
                        end
                        if self.batchpause then
                                sleep(self.batchpause)
                        end
                end
                return true
        end
        return t
end

function joinpath(...)
        local parts={...}
        if #parts < 2 then
                error('joinpath requires at least 2 parts',2)
        end
        local r=parts[1]
        for i = 2, #parts do
                local v = string.gsub(parts[i],'^/','')
                if not string.match(r,'/$') then
                        r=r..'/'
                end
                r=r..v
        end
        return r
end

function ls(path,opts_in)
        local opts={
                msglimit=50,
                msgtimeout=100000,
                dirsonly=true
        }
        if opts_in then
                for k,v in pairs(opts_in) do
                        opts[k]=v
                end
        end
        local st, err = os.stat(path)
        if not st then
                return false, err
        end

        local b=msg_batcher{
                batchsize=opts.msglimit,
                timeout=opts.msgtimeout
        }

        if not st.is_dir then
                if opts.dirsonly then
                        return false, 'not a directory'
                end
                if opts.stat == '*' then
                        st.name=path
                        b:write(st)
                else
                        b:write(path)
                end
                b:flush()
                return true
        end

        local t,msg=os.listdir(path,opts.listall)
        if not t then
                return false,msg
        end
        for i,v in ipairs(t) do
                if not opts.match or string.match(v,opts.match) then
                        if opts.stat then
                                local st,msg=os.stat(joinpath(path,v))
                                if not st then
                                        return false,msg
                                end
                                if opts.stat == '/' then
                                        if st.is_dir then
                                                b:write(v .. '/')
                                        else
                                                b:write(v)
                                        end
                                elseif opts.stat == '*' then
                                        st.name=v
                                        b:write(st)
                                end
                        else
                                b:write(v)
                        end
                end
        end
        b:flush()
        return true
end


