serialize_r = function(v,opts,r,seen,depth)
        local vt = type(v)
        if vt == 'nil' or  vt == 'boolean' or vt == 'number' then
                table.insert(r,tostring(v))
                return
        end
        if vt == 'string' then
                table.insert(r,string.format('%q',v))
                return 
        end
        if vt == 'table' then
                if not depth then
                        depth = 1
                end
                if depth >= opts.maxdepth then
                        error('serialize: max depth')
                end
                if not seen then
                        seen={}
                elseif seen[v] then 
                        if opts.err_cycle then
                                error('serialize: cycle')
                        else
                                table.insert(r,'"cycle:'..tostring(v)..'"')
                                return 
                        end
                end
                seen[v] = true;
                table.insert(r,'{')
                for k,v1 in pairs(v) do
                        if opts.pretty then
                                table.insert(r,'\n'..string.rep(' ',depth))
                        end
                        if type(k) == 'string' and string.match(k,'^[_%a][%a%d_]*$') then
                                table.insert(r,k)
                        else
                                table.insert(r,'[')
                                serialize_r(k,opts,r,seen,depth+1)
                                table.insert(r,']')
                        end
                        table.insert(r,'=')
                        serialize_r(v1,opts,r,seen,depth+1)
                        table.insert(r,',')
                end
                if opts.pretty then
                        table.insert(r,'\n'..string.rep(' ',depth-1))
                end
                table.insert(r,'}')
                return
        end
        if opts.err_type then
                error('serialize: unsupported type ' .. vt, 2)
        else
                table.insert(r,'"'..tostring(v)..'"')
        end
end
serialize_defaults = {
        maxdepth=10,
        err_type=true,
        err_cycle=true,
        pretty=false,
}
function serialize(v,opts)
        if opts then
                for k,v in pairs(serialize_defaults) do
                        if not opts[k] then
                                opts[k]=v
                        end
                end
        else
                opts=serialize_defaults
        end
        local r={}
        serialize_r(v,opts,r)
        return table.concat(r)
end

        usb_msg_table_to_string=serialize

if not get_mode() then
        switch_mode_usb(1)
        local i=0
        while not get_mode() and i < 300 do
                sleep(10)
                i=i+1
        end
        if not get_mode() then
                return false, 'switch failed'
        end
        return true
end
return false,'already in rec'

