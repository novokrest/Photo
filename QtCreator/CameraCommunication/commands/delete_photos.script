serialize_r = function(v,opts,r,seen,depth)
        local vt = type(v)
        if vt == 'nil' or  vt == 'boolean' or vt == 'number' then
                table.insert(r,tostring(v))
                return
        end
        if vt == 'string' then
                table.insert(r,string.format('%q',v))
                return
        end
        if vt == 'table' then
                if not depth then
                        depth = 1
                end
                if depth >= opts.maxdepth then
                        error('serialize: max depth')
                end
                if not seen then
                        seen={}
                elseif seen[v] then
                        if opts.err_cycle then
                                error('serialize: cycle')
                        else
                                table.insert(r,'"cycle:'..tostring(v)..'"')
                                return
                        end
                end
                seen[v] = true;
                table.insert(r,'{')
                for k,v1 in pairs(v) do
                        if opts.pretty then
                                table.insert(r,'\n'..string.rep(' ',depth))
                        end
                        if type(k) == 'string' and string.match(k,'^[_%a][%a%d_]*$') then
                                table.insert(r,k)
                        else
                                table.insert(r,'[')
                                serialize_r(k,opts,r,seen,depth+1)
                                table.insert(r,']')
                        end
                        table.insert(r,'=')
                        serialize_r(v1,opts,r,seen,depth+1)
                        table.insert(r,',')
                end
                if opts.pretty then
                        table.insert(r,'\n'..string.rep(' ',depth-1))
                end
                table.insert(r,'}')
                return
        end
        if opts.err_type then
                error('serialize: unsupported type ' .. vt, 2)
        else
                table.insert(r,'"'..tostring(v)..'"')
        end
end
serialize_defaults = {
        maxdepth=10,
        err_type=true,
        err_cycle=true,
        pretty=false,
}
function serialize(v,opts)
        if opts then
                for k,v in pairs(serialize_defaults) do
                        if not opts[k] then
                                opts[k]=v
                        end
                end
        else
                opts=serialize_defaults
        end
        local r={}
        serialize_r(v,opts,r)
        return table.concat(r)
end

        usb_msg_table_to_string=serialize

function joinpath(...)
        local parts={...}
        if #parts < 2 then
                error('joinpath requires at least 2 parts',2)
        end
        local r=parts[1]
        for i = 2, #parts do
                local v = string.gsub(parts[i],'^/','')
                if not string.match(r,'/$') then
                        r=r..'/'
                end
                r=r..v
        end
        return r
end

function basename(path)
        if not path then
                return nil
        end
        if path == 'A/' then
                return nil
        end
        local s,e,bn=string.find(path,'([^/]+)/?$')
        if not s then
                return nil
        end
        if sfx and string.len(sfx) < string.len(bn) then
                if string.sub(bn,-string.len(sfx)) == sfx then
                        bn=string.sub(bn,1,string.len(bn) - string.len(sfx))
                end
        end
        return bn
end

function mt_inherit(t,base)
        local mt={
                __index=function(table, key)
                        return base[key]
                end
        }
        setmetatable(t,mt)
        return t
end

function extend_table(target,source,deep)
        if type(target) ~= 'table' then
                error('extend_table: target not table')
        end
        if source == nil then
                return target
        end
        if type(source) ~= 'table' then
                error('extend_table: source not table')
        end
        if source == target then
                error('extend_table: source == target')
        end
        if deep then
                return extend_table_r(target, source)
        else
                for k,v in pairs(source) do
                        target[k]=v
                end
                return target
        end
end

fs_iter={}

function fs_iter:depth()
        return #self.rpath
end

function fs_iter:can_recurse()
        if not self.cur.st.is_dir or self.cur.name == '.' or self.cur.name == '..' then
                return false
        end
        return true
end

function fs_iter:recurse()
        if not self:can_recurse() then
                return false
        end
        table.insert(self.rpath,self.cur.path[#self.cur.path])
        local save_cur = self.cur
        local status,err = self:singledir()
        self.cur = save_cur
        table.remove(self.rpath)
        return status,err
end

function fs_iter:singleitem(path)
        local st,err=os.stat(path)
        if not st then
                return false,err
        end
        self.cur={st=st,full=path}
        if path == 'A/' then
                self.cur.name = 'A/'
        else
                self.cur.name = basename(path)
        end
        if #self.rpath == 0 then
                self.cur.path = {path}
        else
                self.cur.path = {unpack(self.rpath)}
                table.insert(self.cur.path,self.cur.name)
        end
        return self:callback()
end

function fs_iter:singledir()
        local cur_dir = self.cur.full
        local t,err=os.listdir(cur_dir,self.listall)
        if not t then
                return false,err
        end
        for i,name in ipairs(t) do
                local status, err = self:singleitem(joinpath(cur_dir,name))
                if not status then
                        return false,err
                end
        end
        return true
end

function fs_iter:end_callback(status,msg)
        return status,msg
end

function fs_iter.run(paths,opts)
        local t=extend_table({},opts)
        mt_inherit(t,fs_iter)

        for i,path in ipairs(paths) do
                t.rpath={}
                local status,err=t:singleitem(path)
                if not status then
                        return t:end_callback(false,err)
                end
        end
        return t:end_callback(true)
end

function msg_batcher(opts)
        local t = extend_table({
                batchsize=50,
                batchgc='step',
                timeout=100000,
        },opts)
        t.data={}
        t.n=0
        if t.dbgmem then
                t.init_free = get_meminfo().free_block_max_size
                t.init_count = collectgarbage('count')
        end
        t.write=function(self,val)
                self.n = self.n+1
                self.data[self.n]=val
                if self.n >= self.batchsize then
                        return self:flush()
                end
                return true
        end
        t.flush = function(self)
                if self.n > 0 then
                        if self.dbgmem then
                                local count=collectgarbage('count')
                                local free=get_meminfo().free_block_max_size
                                self.data._dbg=string.format("count %d (%d) free %d (%d)",
                                        count, count - self.init_count, free, self.init_free-free)
                        end
                        if not write_usb_msg(self.data,self.timeout) then
                                return false
                        end
                        self.data={}
                        self.n=0
                        if self.batchgc then
                                collectgarbage(self.batchgc)
                        end
                        if self.batchpause then
                                sleep(self.batchpause)
                        end
                end
                return true
        end
        return t
end

function find_files_all_fn(di,opts)
        return di:ff_bwrite(di.cur)
end

function find_files_fullname_fn(di,opts)
        return di:ff_bwrite(di.cur.full)
end

function find_files(paths,opts,func)
        if not func then
                func=find_files_fullname_fn
        end
        opts=extend_table({
                dirs=true,
                dirsfirst=false,
                maxdepth=100,
                batchsize=20,
        },opts)

        return fs_iter.run(paths,{
                ff_check_match=function(self,opts)
                        if self.cur.st.is_file then
                                return not opts.fmatch or string.match(self.cur.full,opts.fmatch)
                        end
                        if self.cur.st.is_dir then
                                return not opts.dmatch or string.match(self.cur.full,opts.dmatch)
                        end
                        if opts.martians then
                                return true
                        end
                        return false
                end,
                ff_bwrite=function(self,data)
                        if not self.ff_batcher then
                                self.ff_batcher = msg_batcher({
                                        batchsize=opts.batchsize,
                                        batchpause=opts.batchpause,
                                        batchgc=opts.batchgc,
                                        dbgmem=opts.dbgmem})
                        end
                        return self.ff_batcher:write(data)
                end,
                ff_bflush=function(self)
                        if not self.ff_batcher then
                                return true
                        end
                        return self.ff_batcher:flush()
                end,
                ff_func=func,
                ff_item=function(self,opts)
                        if not self:ff_check_match(opts) then
                                return true
                        end
                        return self:ff_func(opts)
                end,
                callback=function(self)
                        if self.cur.st.is_dir then
                                if opts.dirs and opts.dirsfirst then
                                        local status,err = self:ff_item(opts)
                                        if not status then
                                                return false,err
                                        end
                                end
                                if self:depth() < opts.maxdepth and self:can_recurse() then
                                        if not opts.rmatch or string.match(self.cur.name,opts.rmatch) then
                                                local status,err = self:recurse()
                                                if not status then
                                                        return false,err
                                                end
                                        end
                                end
                                if opts.dirs and not opts.dirsfirst then
                                        local status,err = self:ff_item(opts)
                                        if not status then
                                                return false,err
                                        end
                                end
                        else
                                local status,err = self:ff_item(opts)
                                if not status then
                                        return false,err
                                end
                        end
                        return true
                end,
                end_callback=function(self,status,err)
                        if not status then
                                self:ff_bflush()
                                return false,err
                        end
                        return self:ff_bflush()
                end
        })
end

function ff_mdelete_fn(self,opts)
        local status,msg
        if self.cur.full == 'A/' or (opts.skip_topdirs and self.cur.st.is_dir == true and #self.rpath == 0) then
                return self:ff_bwrite({file=self.cur.full,status=true,msg='skipped'})
        end
        if not opts.pretend then
                status,msg=os.remove(self.cur.full)
                if not status and not opts.ignore_errors then
                        self:ff_bwrite({file=self.cur.full,status=status,msg=msg})
                        return false, msg
                end
        else
                status=true
        end
        return self:ff_bwrite({file=self.cur.full,status=status,msg=msg})
end

function ff_mdelete(paths,opts)
        return find_files(paths,opts,ff_mdelete_fn)
end

return ff_mdelete({
 [1]="A/DCIM",
},{
 dmatch=false,
 skip_topdirs=false,
 maxdepth=100,
 dirs=false,
 dirsfirst=false,
 fmatch=false,
 ignore_errors=false,
 rmatch=false,
 pretend=false,
})
